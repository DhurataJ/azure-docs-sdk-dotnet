<Type Name="WeatherClient" FullName="Azure.Verticals.AgriFood.Farming.WeatherClient">
  <TypeSignature Language="C#" Value="public class WeatherClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WeatherClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.WeatherClient" />
  <TypeSignature Language="VB.NET" Value="Public Class WeatherClient" />
  <TypeSignature Language="F#" Value="type WeatherClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Weather service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeatherClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of WeatherClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WeatherClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, Optional options As FarmBeatsClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Verticals.AgriFood.Farming.WeatherClient : Uri * Azure.Core.TokenCredential * Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions -&gt; Azure.Verticals.AgriFood.Farming.WeatherClient" Usage="new Azure.Verticals.AgriFood.Farming.WeatherClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of WeatherClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataDeleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDataDeleteJob (string jobId, Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDataDeleteJob(string jobId, class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataDeleteJob(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataDeleteJob (jobId As String, content As RequestContent, Optional options As RequestOptions = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataDeleteJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDataDeleteJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="weatherClient.CreateDataDeleteJob (jobId, content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID supplied by end user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Create a weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              extensionId: string (required),
              farmerId: string (required),
              boundaryId: string (required),
              weatherDataType: string,
              granularity: string,
              startDateTime: string (ISO 8601 Format),
              endDateTime: string (ISO 8601 Format),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              extensionId: string,
              farmerId: string,
              boundaryId: string,
              weatherDataType: string,
              granularity: string,
              startDateTime: string (ISO 8601 Format),
              endDateTime: string (ISO 8601 Format),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataDeleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDataDeleteJobAsync (string jobId, Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDataDeleteJobAsync(string jobId, class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataDeleteJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataDeleteJobAsync (jobId As String, content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataDeleteJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDataDeleteJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="weatherClient.CreateDataDeleteJobAsync (jobId, content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID supplied by end user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Create a weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              extensionId: string (required),
              farmerId: string (required),
              boundaryId: string (required),
              weatherDataType: string,
              granularity: string,
              startDateTime: string (ISO 8601 Format),
              endDateTime: string (ISO 8601 Format),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              extensionId: string,
              farmerId: string,
              boundaryId: string,
              weatherDataType: string,
              granularity: string,
              startDateTime: string (ISO 8601 Format),
              endDateTime: string (ISO 8601 Format),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDataIngestionJob (string jobId, Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDataIngestionJob(string jobId, class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataIngestionJob(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJob (jobId As String, content As RequestContent, Optional options As RequestOptions = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDataIngestionJob : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="weatherClient.CreateDataIngestionJob (jobId, content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job id supplied by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Create a weather data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              boundaryId: string (required),
              farmerId: string (required),
              extensionId: string (required),
              extensionApiName: string (required),
              extensionApiInput: Dictionary&lt;string, AnyObject&gt; (required),
              extensionDataProviderAppId: string,
              extensionDataProviderApiKey: string,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              boundaryId: string,
              farmerId: string,
              extensionId: string,
              extensionApiName: string,
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;,
              extensionDataProviderAppId: string,
              extensionDataProviderApiKey: string,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataIngestionJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDataIngestionJobAsync (string jobId, Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDataIngestionJobAsync(string jobId, class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.CreateDataIngestionJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataIngestionJobAsync (jobId As String, content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataIngestionJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDataIngestionJobAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="weatherClient.CreateDataIngestionJobAsync (jobId, content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job id supplied by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Create a weather data ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              boundaryId: string (required),
              farmerId: string (required),
              extensionId: string (required),
              extensionApiName: string (required),
              extensionApiInput: Dictionary&lt;string, AnyObject&gt; (required),
              extensionDataProviderAppId: string,
              extensionDataProviderApiKey: string,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              boundaryId: string,
              farmerId: string,
              extensionId: string,
              extensionApiName: string,
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;,
              extensionDataProviderAppId: string,
              extensionDataProviderApiKey: string,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataDeleteJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataDeleteJobDetails (string jobId, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataDeleteJobDetails(string jobId, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataDeleteJobDetails(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataDeleteJobDetails (jobId As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataDeleteJobDetails : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetDataDeleteJobDetails : string * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.GetDataDeleteJobDetails (jobId, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="options"> The request options. </param>
        <summary> Get weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              extensionId: string,
              farmerId: string,
              boundaryId: string,
              weatherDataType: string,
              granularity: string,
              startDateTime: string (ISO 8601 Format),
              endDateTime: string (ISO 8601 Format),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataDeleteJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataDeleteJobDetailsAsync (string jobId, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataDeleteJobDetailsAsync(string jobId, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataDeleteJobDetailsAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataDeleteJobDetailsAsync (jobId As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataDeleteJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataDeleteJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.GetDataDeleteJobDetailsAsync (jobId, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="options"> The request options. </param>
        <summary> Get weather data delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              extensionId: string,
              farmerId: string,
              boundaryId: string,
              weatherDataType: string,
              granularity: string,
              startDateTime: string (ISO 8601 Format),
              endDateTime: string (ISO 8601 Format),
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDataIngestionJobDetails (string jobId, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDataIngestionJobDetails(string jobId, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataIngestionJobDetails(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetails (jobId As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetails : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetDataIngestionJobDetails : string * Azure.RequestOptions -&gt; Azure.Response" Usage="weatherClient.GetDataIngestionJobDetails (jobId, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="options"> The request options. </param>
        <summary> Get weather ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              boundaryId: string,
              farmerId: string,
              extensionId: string,
              extensionApiName: string,
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;,
              extensionDataProviderAppId: string,
              extensionDataProviderApiKey: string,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataIngestionJobDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDataIngestionJobDetailsAsync (string jobId, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDataIngestionJobDetailsAsync(string jobId, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.GetDataIngestionJobDetailsAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataIngestionJobDetailsAsync (jobId As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDataIngestionJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDataIngestionJobDetailsAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="weatherClient.GetDataIngestionJobDetailsAsync (jobId, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="jobId"> ID of the job. </param>
        <param name="options"> The request options. </param>
        <summary> Get weather ingestion job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              boundaryId: string,
              farmerId: string,
              extensionId: string,
              extensionApiName: string,
              extensionApiInput: Dictionary&lt;string, AnyObject&gt;,
              extensionDataProviderAppId: string,
              extensionDataProviderApiKey: string,
              id: string,
              status: string,
              durationInSeconds: number,
              message: string,
              createdDateTime: string (ISO 8601 Format),
              lastActionDateTime: string (ISO 8601 Format),
              startTime: string (ISO 8601 Format),
              endTime: string (ISO 8601 Format),
              name: string,
              description: string,
              properties: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; List (string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, Azure.RequestOptions options, DateTimeOffset? startDateTime = default, DateTimeOffset? endDateTime = default, int? maxPageSize = default, string skipToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; List(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, class Azure.RequestOptions options, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.List(System.String,System.String,System.String,System.String,System.String,Azure.RequestOptions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function List (farmerId As String, boundaryId As String, extensionId As String, weatherDataType As String, granularity As String, options As RequestOptions, Optional startDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional endDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member List : string * string * string * string * string * Azure.RequestOptions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.List : string * string * string * string * string * Azure.RequestOptions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="weatherClient.List (farmerId, boundaryId, extensionId, weatherDataType, granularity, options, startDateTime, endDateTime, maxPageSize, skipToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="boundaryId" Type="System.String" />
        <Parameter Name="extensionId" Type="System.String" />
        <Parameter Name="weatherDataType" Type="System.String" />
        <Parameter Name="granularity" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="farmerId"> Farmer ID. </param>
        <param name="boundaryId"> Boundary ID. </param>
        <param name="extensionId"> ID of the weather extension. </param>
        <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        <param name="options"> The request options. </param>
        <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <summary> Returns a paginated list of weather data. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  farmerId: string,
                  boundaryId: string,
                  extensionId: string,
                  location: {
                    latitude: number,
                    longitude: number
                  },
                  dateTime: string (ISO 8601 Format),
                  unitSystemCode: string,
                  extensionVersion: string,
                  weatherDataType: string,
                  granularity: string,
                  cloudCover: {
                    unit: string,
                    value: number
                  },
                  dewPoint: Measure,
                  growingDegreeDay: Measure,
                  precipitation: Measure,
                  pressure: Measure,
                  relativeHumidity: Measure,
                  soilMoisture: Measure,
                  soilTemperature: Measure,
                  temperature: Measure,
                  visibility: Measure,
                  wetBulbTemperature: Measure,
                  windChill: Measure,
                  windDirection: Measure,
                  windGust: Measure,
                  windSpeed: Measure,
                  id: string,
                  eTag: string,
                  createdDateTime: string (ISO 8601 Format),
                  modifiedDateTime: string (ISO 8601 Format),
                  properties: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              $skipToken: string,
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" />, <paramref name="boundaryId" />, <paramref name="extensionId" />, <paramref name="weatherDataType" />, or <paramref name="granularity" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ListAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; ListAsync (string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, Azure.RequestOptions options, DateTimeOffset? startDateTime = default, DateTimeOffset? endDateTime = default, int? maxPageSize = default, string skipToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; ListAsync(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, class Azure.RequestOptions options, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.WeatherClient.ListAsync(System.String,System.String,System.String,System.String,System.String,Azure.RequestOptions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ListAsync (farmerId As String, boundaryId As String, extensionId As String, weatherDataType As String, granularity As String, options As RequestOptions, Optional startDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional endDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ListAsync : string * string * string * string * string * Azure.RequestOptions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.ListAsync : string * string * string * string * string * Azure.RequestOptions * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="weatherClient.ListAsync (farmerId, boundaryId, extensionId, weatherDataType, granularity, options, startDateTime, endDateTime, maxPageSize, skipToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="boundaryId" Type="System.String" />
        <Parameter Name="extensionId" Type="System.String" />
        <Parameter Name="weatherDataType" Type="System.String" />
        <Parameter Name="granularity" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="farmerId"> Farmer ID. </param>
        <param name="boundaryId"> Boundary ID. </param>
        <param name="extensionId"> ID of the weather extension. </param>
        <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        <param name="options"> The request options. </param>
        <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <summary> Returns a paginated list of weather data. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  farmerId: string,
                  boundaryId: string,
                  extensionId: string,
                  location: {
                    latitude: number,
                    longitude: number
                  },
                  dateTime: string (ISO 8601 Format),
                  unitSystemCode: string,
                  extensionVersion: string,
                  weatherDataType: string,
                  granularity: string,
                  cloudCover: {
                    unit: string,
                    value: number
                  },
                  dewPoint: Measure,
                  growingDegreeDay: Measure,
                  precipitation: Measure,
                  pressure: Measure,
                  relativeHumidity: Measure,
                  soilMoisture: Measure,
                  soilTemperature: Measure,
                  temperature: Measure,
                  visibility: Measure,
                  wetBulbTemperature: Measure,
                  windChill: Measure,
                  windDirection: Measure,
                  windGust: Measure,
                  windSpeed: Measure,
                  id: string,
                  eTag: string,
                  createdDateTime: string (ISO 8601 Format),
                  modifiedDateTime: string (ISO 8601 Format),
                  properties: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              $skipToken: string,
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  innererror: InnerError
                }
              },
              traceId: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" />, <paramref name="boundaryId" />, <paramref name="extensionId" />, <paramref name="weatherDataType" />, or <paramref name="granularity" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.WeatherClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.WeatherClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
